import numpy as np
import scipy.special
from bokeh.layouts import gridplot
from bokeh.plotting import figure, show
from bokeh.resources import CDN
from bokeh.io import output_notebook
output_notebook(resources=CDN)
from bokeh.models import Range1d

buckets, earliest, latest, gran = time_series()
desired_range = (min(buckets), max(buckets)+10)
distr = []
for x in range(len(buckets)):
    for y in range(buckets[x]):
        distr.append(x)

p = figure(title="Task Time Series",tools=["save", "hover", "wheel_zoom", "box_zoom", "pan"],
            background_fill_color="#FFFFFF", y_range = desired_range, x_range = (0, latest - earliest))

hist, bin_edges = np.histogram(distr, bins = range(len(buckets)))

p.quad(top=hist, bottom=0, left=bin_edges[:-1], right=bin_edges[1:],
        fill_color="#B3B3B3", line_color="#033649")

p.xaxis.axis_label = 'Time in seconds'
p.yaxis.axis_label = 'Number of concurrent tasks'

show(gridplot(p, ncols=1, plot_width=500, plot_height=500, toolbar_location="below"))




import time
import sys

def time_series():
    end = time.time()
    start = 0
    granularity = 1
    earliest = sys.maxsize
    latest = 0
    tasks = ray.global_state.task_profiles(start=0, end=time.time())
    for task_id, data in tasks.items():
        if data["get_task_start"] < earliest:
            earliest = data["get_task_start"]
        if data["get_task_start"] > latest:
            latest = data["get_task_start"]
    # print("earliest " + str(earliest))
    # print("latest " + str(latest))
    # print("granularity" + str(granularity))
    buckets = [0 for _ in range(int((int(latest) - int(earliest))/granularity))]
    count = 0
    start_point = 0
    end_point = 0
    for x in range(1, len(buckets)+1, granularity):
      if count  == len(buckets):
        break
      else:
        start = (x * granularity) + earliest
        if x == 1:
          start_point = start
        end= ((x + 1) * granularity) + earliest
        if count == len(buckets)-1:
          end_point = end
        t, e, l = ray.global_state.task_profiles(start=start, end=end)
        buckets[count] += len(t)
        count += 1
    return buckets, start_point, end_point, granularity